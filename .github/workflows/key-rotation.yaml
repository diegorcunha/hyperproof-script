name: Rotate Google Maps API Key

on:
  schedule:
    - cron: "0 0 * 1/3 *"  # Runs every 3 months at midnight UTC
  workflow_dispatch:     # Manual trigger option

jobs:
  rotate-api-key:
    runs-on: ubuntu-latest

    env:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      AZURE_KEYVAULT_NAME: ${{ secrets.AZURE_KEYVAULT_NAME }}
      SECRET_NAME: ${{ secrets.SECRET_NAME }}

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Google Cloud CLI
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Install Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Step 3: Azure CLI Login
      - name: Azure CLI login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Step 4: Rotate the API key and update Azure Key Vault
      - name: Rotate Google Maps API Key
        run: |
          # Variables
          NEW_KEY_NAME="google-map-key-$(date +%s)"

          # Create a new Google Maps API Key
          echo "Creating a new Google Maps API Key..."
          NEW_API_KEY=$(gcloud alpha services api-keys create \
            --display-name="${NEW_KEY_NAME}" \
            --project="${GCP_PROJECT_ID}" 

          # Store the new key in Azure Key Vault
          echo "Storing the new API Key in Azure Key Vault..."
          az keyvault secret set \
            --vault-name "${AZURE_KEYVAULT_NAME}" \
            --name "${SECRET_NAME}" \
            --value "${NEW_KEY_NAME}:${NEW_API_KEY}" \
            --query "id" -o tsv
      
      # Step 5: Restart the deployment to use the new Secret
      
      # - name: Restart the Service
      # uses: kodermax/kubectl-aws-eks@master
      # env:
      # KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      # with:
      #   args: kubectl rollout restart deployment maps-service -n production
        
      # Step 6: Notify on Success or Failure
      - name: Send Notification on Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_MESSAGE: "Google Maps API Key rotation failed ‚ùå"
